=======================迭代优化
>>> squares = []
>>> for x in [1, 2, 3, 4, 5]:          # This is what a list comprehension does        
        squares.append(x ** 2)         # Both run the iteration protocol internally
>>> squares
[1, 4, 9, 16, 25]

Both tools leverage the iteration protocol internally and produce the same result.
The list comprehension, though, and related functional programming tools like map
and filter, will often run faster than a for loop today on some types of code
(perhaps even twice as fast)—a property that could matter in your programs for large
data sets. Having said that, though, I should point out that performance measures
are tricky business in Python because it optimizes so much, and they may vary from
release to release.



========================Tuple
为什么需要这种奇奇怪怪的变量类型
作为类似C语言中的const使用

========================File
File最重要的是文件编码方式

========================Sets
集合支持逻辑运算

========================如何破坏程序的灵活性
判断变量类型

========================数据类型-数字 Python expression operators and precedence  
Operators                   Description     
yield x                     Generator  function send protocol    
lambda args: expression     Anonymous  function generation    
x if y else z               Ternary  selection (x is evaluated only if y is true)    
x or y                      Logical  OR (y is evaluated only if x is false)    
x and y                     Logical AND ( y is evaluated only if x is true)    
not x                       Logical negation     
x in y, x not in y          Membership (iterables, sets)     
x is y, x is not y          Object identity tests 
x < y, x <= y, x > y,
x >= y  x == y, x != y      Magnitude comparison, set subset and superset; Value  equality operators    
x | y                       Bitwise  OR, set union    
x ^ y                       Bitwise XOR, set symmetric difference     
x & y                       Bitwise AND, set intersection     
x << y, x >> y              Shift  x left or right by y bits  
x + y  x – y                Addition, concatenation; Subtraction, set difference   
x * y x % y  x / y, x // y  Multiplication, repetition; Remainder, format; Division: true and floor     
−x, +x                      Negation, identity     
˜x                          Bitwise NOT (inversion)     
x ** y                      Power (exponentiation)     
x[i]                        Indexing (sequence, mapping, others)     
x[i:j:k]                    Slicing     
x(...)                      Call (function, method, class, other callable)     
x.attr                      Attribute reference     
(...)                       Tuple, expression, generator expression     
[...]                       List, list comprehension     
{...}                       Dictionary, set, set and dictionary comprehensions 






